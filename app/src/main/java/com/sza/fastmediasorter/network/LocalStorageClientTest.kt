// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ LocalStorageClient –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–∞–ø–æ–∫
//
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
// –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –ø–∞–ø–æ–∫ –≤ LocalStorageClient.
//
// –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
// 1. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤ (1000+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
// 2. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ SAF (Storage Access Framework)
// 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
// 4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
//
// –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
// - UI –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
// - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
// - –§–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–∞—Ç—á–∞–º–∏ –ø–æ 50 —à—Ç—É–∫
// - –õ–æ–≥–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞

import android.content.Context
import android.net.Uri
import com.sza.fastmediasorter.network.LocalStorageClient
import com.sza.fastmediasorter.utils.Logger
import kotlinx.coroutines.*

class LocalStorageClientTest(
    private val context: Context,
) {
    private val localStorageClient = LocalStorageClient(context)

    /**
     * –¢–µ—Å—Ç 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–π –ø–∞–ø–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     * –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å 1000+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ
     */
    suspend fun testLargeFolderScanning(folderUri: Uri) {
        Logger.d("LocalStorageClientTest", "=== –¢–ï–°–¢: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–æ–π –ø–∞–ø–∫–∏ ===")

        val startTime = System.currentTimeMillis()

        val files =
            localStorageClient.getImageFiles(
                folderUri = folderUri,
                isVideoEnabled = true,
                maxVideoSizeMb = 100,
                batchSize = 50, // –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
                progressCallback =
                    object : LocalStorageClient.ScanProgressCallback {
                        override fun onProgress(
                            scannedCount: Int,
                            totalCount: Int,
                            currentBatch: Int,
                        ) {
                            val progressPercent = if (totalCount > 0) (scannedCount * 100) / totalCount else 0
                            Logger.d(
                                "LocalStorageClientTest",
                                "–ü—Ä–æ–≥—Ä–µ—Å—Å: $scannedCount/$totalCount —Ñ–∞–π–ª–æ–≤ ($progressPercent%), –±–∞—Ç—á $currentBatch",
                            )

                            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±—ã UI
                            // updateProgressBar(progressPercent)
                        }

                        override fun onComplete(
                            totalFiles: Int,
                            durationMs: Long,
                        ) {
                            Logger.d(
                                "LocalStorageClientTest",
                                "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $totalFiles —Ñ–∞–π–ª–æ–≤ –∑–∞ ${durationMs}–º—Å",
                            )
                        }
                    },
            )

        val totalTime = System.currentTimeMillis() - startTime
        Logger.d("LocalStorageClientTest", "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê ===")
        Logger.d("LocalStorageClientTest", "–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.size}")
        Logger.d("LocalStorageClientTest", "–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}–º—Å")
        Logger.d("LocalStorageClientTest", "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª: ${totalTime.toFloat() / files.size}–º—Å")

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert(files.isNotEmpty()) { "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã" }
        assert(files.all { it.uri.toString().isNotEmpty() }) { "–í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ URI" }

        Logger.d("LocalStorageClientTest", "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    }

    /**
     * –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∞—Ç—á–µ–π
     */
    suspend fun testBatchSizeComparison(folderUri: Uri) {
        Logger.d("LocalStorageClientTest", "=== –¢–ï–°–¢: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –±–∞—Ç—á–µ–π ===")

        val batchSizes = listOf(10, 50, 100, 500)

        for (batchSize in batchSizes) {
            Logger.d("LocalStorageClientTest", "–¢–µ—Å—Ç–∏—Ä—É–µ–º batchSize = $batchSize")

            val startTime = System.currentTimeMillis()

            val files =
                localStorageClient.getImageFiles(
                    folderUri = folderUri,
                    batchSize = batchSize,
                    progressCallback =
                        object : LocalStorageClient.ScanProgressCallback {
                            override fun onProgress(
                                scannedCount: Int,
                                totalCount: Int,
                                currentBatch: Int,
                            ) {
                                // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                            }

                            override fun onComplete(
                                totalFiles: Int,
                                durationMs: Long,
                            ) {
                                Logger.d(
                                    "LocalStorageClientTest",
                                    "batchSize $batchSize: $totalFiles —Ñ–∞–π–ª–æ–≤ –∑–∞ ${durationMs}–º—Å",
                                )
                            }
                        },
                )

            val totalTime = System.currentTimeMillis() - startTime
            Logger.d(
                "LocalStorageClientTest",
                "batchSize $batchSize: ${files.size} —Ñ–∞–π–ª–æ–≤, –≤—Ä–µ–º—è: ${totalTime}–º—Å",
            )
        }

        Logger.d("LocalStorageClientTest", "‚úÖ –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    }

    /**
     * –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
     * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ UI –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    suspend fun testUIResponsiveness(folderUri: Uri) =
        withContext(Dispatchers.Main) {
            Logger.d("LocalStorageClientTest", "=== –¢–ï–°–¢: –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å UI ===")

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            val scanJob =
                launch(Dispatchers.IO) {
                    localStorageClient.getImageFiles(
                        folderUri = folderUri,
                        batchSize = 25, // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏
                        progressCallback =
                            object : LocalStorageClient.ScanProgressCallback {
                                override fun onProgress(
                                    scannedCount: Int,
                                    totalCount: Int,
                                    currentBatch: Int,
                                ) {
                                    Logger.d("LocalStorageClientTest", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: $scannedCount/$totalCount")
                                }

                                override fun onComplete(
                                    totalFiles: Int,
                                    durationMs: Long,
                                ) {
                                    Logger.d("LocalStorageClientTest", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: $totalFiles —Ñ–∞–π–ª–æ–≤")
                                }
                            },
                    )
                }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å UI –∫–∞–∂–¥—ã–µ 100–º—Å
            var uiResponsiveChecks = 0
            val uiCheckJob =
                launch(Dispatchers.Main) {
                    while (scanJob.isActive) {
                        delay(100)
                        uiResponsiveChecks++
                        Logger.d("LocalStorageClientTest", "UI –æ—Ç–∑—ã–≤—á–∏–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ #$uiResponsiveChecks")
                        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å UI —ç–ª–µ–º–µ–Ω—Ç
                    }
                }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scanJob.join()
            uiCheckJob.cancel()

            Logger.d("LocalStorageClientTest", "UI –æ—Å—Ç–∞–≤–∞–ª—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ $uiResponsiveChecks –ø—Ä–æ–≤–µ—Ä–æ–∫")
            Logger.d("LocalStorageClientTest", "‚úÖ –¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI –ø—Ä–æ–π–¥–µ–Ω")
        }

    /**
     * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
     */
    suspend fun runAllTests(folderUri: Uri) {
        Logger.d("LocalStorageClientTest", "üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø LocalStorageClient")

        try {
            testLargeFolderScanning(folderUri)
            delay(1000) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

            testBatchSizeComparison(folderUri)
            delay(1000)

            testUIResponsiveness(folderUri)

            Logger.d("LocalStorageClientTest", "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
        } catch (e: Exception) {
            Logger.e("LocalStorageClientTest", "‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: ${e.message}", e)
            throw e
        }
    }
}

/*
–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:

1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
   - –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É —Å 1000+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (JPG, PNG, WebP)
   - –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   - –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É, –¥–æ—Å—Ç—É–ø–Ω—É—é —á–µ—Ä–µ–∑ SAF

2. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:
   ```kotlin
   val test = LocalStorageClientTest(context)
   val folderUri = // URI –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —á–µ—Ä–µ–∑ SAF

   lifecycleScope.launch {
       test.runAllTests(folderUri)
   }
   ```

3. –ß—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç—å:
   - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ–ª–∂–µ–Ω –ø–ª–∞–≤–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è
   - UI –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º (–º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏)
   - –õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–µ–π
   - –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º

4. –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
   - –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: UI –∑–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥/–º–∏–Ω—É—Ç
   - –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π: UI –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∑—ã–≤—á–∏–≤—ã–º, –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∏–¥–µ–Ω

5. –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
   - Batch size 10-50: –õ—É—á—à–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å UI
   - Batch size 100+: –õ—É—á—à–∞—è –æ–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
   - –ö–æ–º–ø—Ä–æ–º–∏—Å—Å: 50 —Ñ–∞–π–ª–æ–≤ –Ω–∞ –±–∞—Ç—á
*/
